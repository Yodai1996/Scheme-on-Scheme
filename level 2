(define (scheme)
  (let ((top-env (make-top-env)))
    (define (rep-loop env)
      (display "my-scheme> ")
      (let* ((res (base-eval env (read)))
             (env (car res))
             (val (cdr res)))
        (print-data val)
        (newline)
        (if (equal? val '*exit*)
            #t
            (rep-loop env))))
    (rep-loop top-env)))
 
 
 (define (empty-frame)
(list))
(define (update frame var val)
(cons (cons var val) frame))
(define (lookup var frame)
(assoc var frame))


(define (make-env)
(list (empty-frame)))
(define (extend-env env)
(cons (empty-frame) env))
(define (define-var env var val)
(if (null? env)
env
(cons (update (car env) var val) (cdr env))))
(define (lookup-var var env)
(if (null? env)
#f
(let ((found (lookup var (car env))))
(if (pair? found)
found
(lookup-var var (cdr env))))))


(define (make-closure env params body)
(cons '*lambda* (cons env (cons params body))))
(define (data-closure? data)
(and (pair? data) (equal? (car data) '*lambda*)))
(define closure-env cadr)
(define closure-params caddr)
(define closure-body cdddr)

(define (make-primitive arity fun)
(list '*primitive* arity fun))
(define (data-primitive? data)
(and (pair? data) (equal? (car data) '*primitive*)))
(define primitive-arity cadr)
(define primitive-fun caddr)


(define (print-data data)
(cond ((data-closure? data) (display "#<closure>"))
((data-primitive? data) (display "#<primitive>"))
((equal? data '*unspecified*) (display "#<unspecified>"))
((equal? data '*error*) (display "#<error>"))
((equal? data '*exit*))
(else (write data))))



(define (base-eval env exp)
(cond ((eof-object? exp) (cons env '*exit*))
((constant? exp) (cons env exp))
(else #f )))

(define (constant? exp)
(or (boolean? exp) (number? exp) (string? exp)))

(define (make-top-env)
(let* ((env (make-env))
(env
(define-var env '=
(make-primitive 2 (lambda (env args)

(cons env (= (car args) (cadr args)))))))

(env
(define-var env '+
(make-primitive 2 (lambda (env args)

(cons env (+ (car args) (cadr args)))))))

(env
(define-var env '*
(make-primitive 2 (lambda (env args)

(cons env (* (car args) (cadr args)))))))

(env
(define-var env 'list
(make-primitive #f (lambda (env args) (cons env args)))))
(env
(define-var env 'null?
  (make-primitive 1 (lambda (env args)
    (cons env (null? (car args)))))))

(env
(define-var env 'equal?
  (make-primitive 2 (lambda (env args)
    (cons env (equal? (car args) (cadr args)))))))

(env
(define-var env 'display
(make-primitive
1
(lambda (env args)
(display (car args))
(cons env '*unspecified*)))))
(env
(define-var env 'load ; load に関しては理解できなくもよい
(make-primitive
1
(lambda (env args)
(with-input-from-file (car args)
(lambda ()
(define (re-loop env)
(let* ((res (base-eval env (read)))
(env (car res))
(val (cdr res)))
(if (equal? val '*exit*)
(cons env '*unspecified*)
(re-loop env))))
(re-loop env))))))))

env))
